/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");

/**
 * Options to pass to create a GoodDatumInstance
 *
 * @property { string } [token] The Token HTTP request header
 */
export interface GoodDatumContextCreateOptions {
  token?: string;
}

export interface GoodDatumContext {
  /**
   * Create a GoodDatumInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed GoodDatumInstance
   */
  create(
    callback?: (error: Error | null, item?: GoodDatumInstance) => any
  ): Promise<GoodDatumInstance>;
  /**
   * Create a GoodDatumInstance
   *
   * @param { GoodDatumContextCreateOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed GoodDatumInstance
   */
  create(
    params: GoodDatumContextCreateOptions,
    callback?: (error: Error | null, item?: GoodDatumInstance) => any
  ): Promise<GoodDatumInstance>;
  create(params?: any, callback?: any): Promise<GoodDatumInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface GoodDatumContextSolution {}

export class GoodDatumContextImpl implements GoodDatumContext {
  protected _solution: GoodDatumContextSolution;
  protected _uri: string;

  constructor(protected _version: V1) {
    this._solution = {};
    this._uri = `/Accounts/GoodData`;
  }

  create(params?: any, callback?: any): Promise<GoodDatumInstance> {
    if (typeof params === "function") {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    const headers: any = {};
    if (params["token"] !== undefined) headers["Token"] = params["token"];

    let operationVersion = this._version,
      operationPromise = operationVersion.create({
        uri: this._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new GoodDatumInstance(operationVersion, payload)
    );

    operationPromise = this._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface GoodDatumPayload extends GoodDatumResource {}

interface GoodDatumResource {
  workspace_id?: string | null;
  session_expiry?: string | null;
  session_id?: string | null;
  url?: string | null;
}

export class GoodDatumInstance {
  protected _solution: GoodDatumContextSolution;
  protected _context?: GoodDatumContext;

  constructor(protected _version: V1, payload: GoodDatumPayload) {
    this.workspaceId = payload.workspace_id;
    this.sessionExpiry = payload.session_expiry;
    this.sessionId = payload.session_id;
    this.url = payload.url;

    this._solution = {};
  }

  /**
   * Unique workspace ID in gooddata
   */
  workspaceId?: string | null;
  /**
   * The session expiry date and time
   */
  sessionExpiry?: string | null;
  /**
   * Unique session ID
   */
  sessionId?: string | null;
  /**
   * The URL of this resource.
   */
  url?: string | null;

  private get _proxy(): GoodDatumContext {
    this._context = this._context || new GoodDatumContextImpl(this._version);
    return this._context;
  }

  /**
   * Create a GoodDatumInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed GoodDatumInstance
   */
  create(
    callback?: (error: Error | null, item?: GoodDatumInstance) => any
  ): Promise<GoodDatumInstance>;
  /**
   * Create a GoodDatumInstance
   *
   * @param { GoodDatumContextCreateOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed GoodDatumInstance
   */
  create(
    params: GoodDatumContextCreateOptions,
    callback?: (error: Error | null, item?: GoodDatumInstance) => any
  ): Promise<GoodDatumInstance>;
  create(params?: any, callback?: any): Promise<GoodDatumInstance> {
    return this._proxy.create(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      workspaceId: this.workspaceId,
      sessionExpiry: this.sessionExpiry,
      sessionId: this.sessionId,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface GoodDatumListInstance {
  (): GoodDatumContext;
  get(): GoodDatumContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface GoodDatumSolution {}

interface GoodDatumListInstanceImpl extends GoodDatumListInstance {}
class GoodDatumListInstanceImpl implements GoodDatumListInstance {
  _version?: V1;
  _solution?: GoodDatumSolution;
  _uri?: string;
}

export function GoodDatumListInstance(version: V1): GoodDatumListInstance {
  const instance = (() => instance.get()) as GoodDatumListInstanceImpl;

  instance.get = function get(): GoodDatumContext {
    return new GoodDatumContextImpl(version);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return this._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(this.toJSON(), options);
  };

  return instance;
}
